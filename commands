#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == postgres:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        echo "Link plugin not found... Did you install it from https://github.com/rlaneve/dokku-link?"
        exit 1
    fi

    PLUGIN_NAME="postgres"
    CONTAINER_NAME="${PLUGIN_NAME}_$APP"
    HOST_DIR="$DOKKU_ROOT/$APP/$PLUGIN_NAME"
    ENVVAR_NAME="DATABASE_URL"
fi

case "$1" in
  postgres:create)
    # Check if Postgres container is installed
    IMAGE=$(docker images | grep "jezdez/postgres" | awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "Postgres image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi

    # Stop existing container with the same persistent Postgres
    ID=$(docker ps | grep "$CONTAINER_NAME" | awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi

    # Check if an existing DB volume exists
    if [[ -d $HOST_DIR ]]; then
        echo "-----> Reusing $CONTAINER_NAME data"
    else
        mkdir -p $HOST_DIR
        chown -R dokku:dokku $HOST_DIR
    fi
    VOLUME="$HOST_DIR:/var/lib/postgresql"
    PASS=$(openssl rand -base64 32|base64)
    echo $PASS >> $HOST_DIR/db_pw
    # Launch container
    docker run -v $VOLUME -name=$CONTAINER_NAME -d \
        -e POSTGRESQL_USER=$APP -e POSTGRESQL_PASS=$PASS -e POSTGRESQL_DB=$APP \
        jezdez/postgres

    # Link to a potential existing app
    dokku postgres:link $APP $APP
    echo "-----> Postgres container created: $CONTAINER_NAME"
    sleep 1
    dokku postgres:info $APP
    ;;

  postgres:create_db)
    VOLUME="$HOST_DIR:/var/lib/postgresql"
    docker run -v $VOLUME -name=$CONTAINER_NAME -d \
      -e POSTGRESQL_USER=$APP -e POSTGRESQL_PASS=$(cat $HOST_DIR/db_pw) -e POSTGRESQL_DB=$3 jezdez/postgres
    ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
    dokku config:set "$APP" $ENVVAR_NAME="postgres://${APP}:$(cat $HOST_DIR/db_pw)@$IP:5432/$3"
    ;;

  postgres:delete)
    # Stop the container
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID > /dev/null
        docker rm $ID  > /dev/null
    fi
    # Remove persistent volume
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi

    # unlink this container as "postgres"
    dokku link:delete "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"
    dokku config:unset "$APP" $ENVVAR_NAME
    echo "-----> Postgres container deleted: $CONTAINER_NAME"
    ;;

  postgres:info)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
    echo
    echo "       Host: ${IP}"
    echo "       Private port: 5432"
    echo
    ;;

  postgres:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        CONTAINER_NAME="postgres_$3"

        # link this container as "postgres"
        dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"

        # figure out IP to set env var
        ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
        IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
        PW=$(cat $HOST_DIR/db_pw)
        dokku config:set "$APP" $ENVVAR_NAME="postgres://${APP}:${PW}@$IP:5432/${APP}"
        echo "-----> $APP linked to $CONTAINER_NAME container"
    fi
    ;;

  postgres:logs)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    postgres:create <app>                              Create a Postgres container
    postgres:delete <app>                              Delete specified Postgres container
    postgres:info <app>                                Display container informations
    postgres:link <app> <container>                    Link an app to a Postgres container
    postgres:logs <app>                                Display last logs from Postgres container
EOF
    ;;

esac
